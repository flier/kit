package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"reflect"
	"strings"

	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"

	//"golang.org/x/tools/go/exact"
	"golang.org/x/tools/go/types"

	_ "golang.org/x/tools/go/gcimporter"
)

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string // Name of the constant type.
}

// genDecl processes one declaration clause.
func (f *File) visit(node ast.Node) bool {
	if node == nil {
		return true
	}

	buf := new(bytes.Buffer)

	fmt.Fprintf(buf, "%s ", reflect.TypeOf(node))

	fmt.Fprintf(buf, "[%d:%d] ", node.Pos(), node.End())

	switch n := node.(type) {
	case *ast.Comment:
		fmt.Fprint(buf, n.Text)
	case *ast.CommentGroup:
		for _, comment := range n.List {
			fmt.Fprint(buf, comment.Text)
		}
	case *ast.GenDecl:
		fmt.Fprintf(buf, "%v", n)
	default:
		fmt.Fprintf(buf, "%v", n)
	}

	log.Print(buf.String())

	return true
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

// check type-checks the package. The package must be OK to proceed.
func (pkg *Package) check(fs *token.FileSet, astFiles []*ast.File) error {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{FakeImportC: true}
	info := &types.Info{
		Defs: pkg.defs,
	}
	if typesPkg, err := config.Check(pkg.dir, fs, astFiles, info); err != nil {
		return fmt.Errorf("invalid package: %s", err)
	} else {
		pkg.typesPkg = typesPkg
		return nil
	}
}

type Generator struct {
	buf bytes.Buffer // Accumulated output.
	dir string
	pkg *Package // Package we are scanning.
}

func (g *Generator) parse(args []string) error {
	if len(args) == 1 && isDirectory(args[0]) {
		g.dir = args[0]
		return g.parsePackageDir(args[0])
	} else {
		g.dir = filepath.Dir(args[0])
		return g.parsePackageFiles(args)
	}
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(dir string) error {
	pkg, err := build.Default.ImportDir(dir, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", dir, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(dir, names)
	return g.parsePackage(dir, names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) error {
	return g.parsePackage(".", names, nil)
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(dir string, names []string, text interface{}) error {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()
	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		if parsedFile, err := parser.ParseFile(fs, name, text, parser.AllErrors|parser.ParseComments); err != nil {
			return nil
		} else {
			astFiles = append(astFiles, parsedFile)
			files = append(files, &File{
				file: parsedFile,
				pkg:  g.pkg,
			})
		}
	}
	if len(astFiles) == 0 {
		return fmt.Errorf("%s: no buildable Go files", dir)
	}
	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = dir

	// Type check the package.
	return g.pkg.check(fs, astFiles)
}

func (g *Generator) generateHeader() {
	// Print the header and package clause.
	g.Printf("// generated by `%s %s`; DO NOT EDIT\n", appName, strings.Join(os.Args[1:], " "))
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf("import \"fmt\"\n") // Used by all methods.
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// generate produces the String method for the named type.
func (g *Generator) generateType(typeName string) error {
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName

		if file.file != nil {
			ast.Inspect(file.file, file.visit)
		}
	}

	return nil
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}
